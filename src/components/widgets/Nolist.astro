---
import WidgetWrapper from '~/components/ui/WidgetWrapper.astro';
import Headline from '~/components/ui/Headline.astro';
import Image from '~/components/common/Image.astro';
import Button from '~/components/ui/Button.astro';

type ClassMap = Record<string, string>
type Img = { src?: unknown; alt?: string; width?: number; height?: number; href?: string; target?: string }
type Action = { variant?: 'primary' | 'secondary' | 'tertiary' | 'link'; text?: string; href?: string; target?: string; icon?: string }

export interface Props {
  id?: string
  tagline?: string
  title?: string
  subtitle?: string
  isDark?: boolean
  isReversed?: boolean
  items?: unknown[]
  image?: Img
  actions?: Action[]
  // allow either a flat map or nested buckets like { container, panel, icon, items }
  classes?: ClassMap | { [key: string]: string | ClassMap }
  bg?: string
  columns?: number
  defaultIcon?: string
  // slots we might render
  // note: Astro will provide these when you call await Astro.slots.render('x')
}

const {
  id,
  tagline,
  title,
  subtitle,
  isDark= false,
  isReversed = false,
  items = [],
  image = {} as Img,
  actions = [],
  classes = {} as Props['classes'],
  bg,
} = Astro.props as Props
---

<WidgetWrapper
  id={id}
  isDark={isDark}
  containerClass={typeof classes?.container === 'string' ? classes?.container : (typeof classes === 'string' ? classes : '')}
  bg={bg}
>
  <div class="relative max-w-5xl mx-auto px-4 sm:px-6">
    <div class={`grid gap-10 md:gap-12 md:grid-cols-2 ${isReversed ? 'md:[direction:rtl]' : ''}`}>
      <!-- left column: headline -> items -> action -->
      <div class="[direction:ltr] w-full">
        <Headline
          title={title}
          subtitle={subtitle}
          tagline={tagline}
          classes={{
            container: 'text-center md:text-left rtl:md:text-right !mb-0',
            title: 'text-3xl lg:text-4xl font-bold font-heading !mb-5',
            subtitle: 'text-xl text-muted dark:text-slate-400 !mb-3',
          }}
        />

        <!-- items -->
    <div class="space-y-3">
    {items?.length
        ? items.map(({ title: t2, description }) => (
            <div>
            {t2 && <h3 class="text-lg font-semibold font-heading mb-1" set:html={t2} />}
            <p class="text-muted dark:text-gray-400 leading-relaxed" set:html={description} />
            </div>
        ))
        : ''}
    </div>
        

        <!-- action under items -->
        <div class="w-full text-center md:text-left rtl:md:text-right mt-10">
         {
            actions && (
              <div class="max-w-xs sm:max-w-md m-auto flex flex-nowrap flex-col sm:flex-row sm:justify-center gap-4 lg:justify-start lg:m-0 lg:max-w-7xl intersect-once motion-safe:md:intersect:animate-fade motion-safe:md:opacity-0 intersect-quarter">
                {Array.isArray(actions) ? (
                  actions.map((action) => (
                    <div class="flex w-full sm:w-auto">
                      <Button {...(action || {})} class="w-full sm:mb-0" />
                    </div>
                  ))
                ) : (
                  <Fragment set:html={actions} />
                )}
              </div>
            )
          }
        </div>
      </div>

      <!-- right column: optional image -->

{image && (
  <div class={`${isReversed ? 'md:order-first [direction:ltr]' : ''}`}>
    <Image
      src={image.src}
      alt={image?.alt ?? ''}
      width={image?.width ?? 500}
      height={image?.height ?? 500}
      class="h-auto w-full rounded-lg"
      loading="lazy"
    />
  </div>
)}


    </div>
  </div>
</WidgetWrapper>