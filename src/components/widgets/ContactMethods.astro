---
import WidgetWrapper from '~/components/ui/WidgetWrapper.astro';
import Headline from '~/components/ui/Headline.astro';
import ItemGrid2 from '~/components/ui/ItemGrid2.astro';

type ClassMap = Record<string, string>
type CTA = { href?: string; text?: string; target?: string }

export interface Item {
  // you cloned from Features, so these exist in your markup:
  title?: string
  description?: string
  classes?: ClassMap

  // and these are specific to ContactMethods:
  label?: string
  icon?: string
  href?: string
  target?: string
  callToAction?: CTA
}

interface Props {
  title?: string
  subtitle?: string
  tagline?: string
  items?: Item[]
  columns?: number
  defaultIcon?: string
  id?: string
  isDark?: boolean
  classes?: ClassMap
  bg?: string
}

const {
  title = await Astro.slots.render('title'),
  subtitle = await Astro.slots.render('subtitle'),
  tagline = await Astro.slots.render('tagline'),
  items = [],
  columns = 3,
  defaultIcon,
  id,
  isDark = false,
  classes = {} as ClassMap,
  bg = await Astro.slots.render('bg'),
} = Astro.props as Props
---


<WidgetWrapper id={id} isDark={isDark} containerClass={`max-w-5xl mx-auto ${classes?.container ?? ''}`} bg={bg}>
  <Headline title={title} subtitle={subtitle} tagline={tagline} />

<ItemGrid2
  items={items.map((item) => {
    const url = item.href || item.callToAction?.href;
    if (!url) return item;

    const safeLabel =
      typeof item.title === 'string' ? item.title.replace(/"/g, '&quot;') : 'Open';

    // add target if provided
    const targetAttr = item.target ? ` target="${item.target}"` : '';
    // add rel only when opening a new tab
    const relAttr = item.target === '_blank' ? ' rel="noopener noreferrer"' : '';

    return {
      ...item,
      description: `${item.description ?? ''}<a href="${url}"${targetAttr}${relAttr} aria-label="${safeLabel}" class="absolute inset-0 z-10"></a>`,
      classes: {
        ...item.classes,
        panel: `relative cursor-pointer transition-colors hover:bg-blue-50 dark:hover:bg-slate-800 ${item.classes?.panel ?? ''}`,
      },
    };
  })}
    columns={columns}
    defaultIcon={defaultIcon}
    classes={{
      container: 'gap-4 md:gap-6',
      panel:
        'rounded-lg shadow-[0_4px_30px_rgba(0,0,0,0.1)] dark:shadow-[0_4px_30px_rgba(0,0,0,0.1)] backdrop-blur border border-[#ffffff29] bg-white dark:bg-slate-900 p-6',
      icon: 'w-12 h-12 mb-6 text-primary',
  ...((typeof classes?.items === 'object' ? (classes.items as Record<string, string>) : {})),    }}
  />
</WidgetWrapper>